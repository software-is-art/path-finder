# Task ID: 17
# Title: Implement Core Standard Library (Nat, Bool, Option, List)
# Status: in-progress
# Dependencies: 4, 5
# Priority: high
# Description: Implement the core standard library types: `Nat`, `Bool`, `List`, and `NonEmptyList`. This task focuses on establishing essential, safe, and robust building blocks for practical programming in PathFinder LISP, aligned with a HoTT/dependent types philosophy. Key aspects include defining types with `deftype`, using the effect system for partial functions (explicitly eliminating the need for `Option` types), and leveraging the proof-carrying `NonEmptyList` type for safe head/tail access.
# Details:
This task involves defining the core data types for the PathFinder LISP standard library, with an emphasis on totality and safety.

**General Requirements:**
- All specified types (Nat, Bool, List T, NonEmptyList T) must be defined using the `deftype` mechanism (from Task 5).
- Canonical Instantiation Functions (CIFs) for each type and its variants (e.g., `NECons` for `NonEmptyList`, `Cons` for `List`) should be available as per the `deftype` specification.
- Operations and functions for these types should be implemented as PathFinder LISP functions and must be type-checked by the system's type checker (from Task 4).
- Partial functions like `subtract` must use the language's effect system for error handling instead of returning an option type.
- The `deftype` mechanism must support parameterized types (e.g., `List T`) and recursive type definitions (e.g., `List T`, Peano `Nat`).

**Type Definitions and Operations:**

1.  **Nat (Natural Numbers):**
    *   Definition: `(deftype Nat (Zero) (Succ Nat))` (Peano representation).
    *   CIFs: `Zero`, `Succ`.
    *   Operations:
        *   `isZero?: Nat -> Bool`
        *   `add: Nat Nat -> Nat`
        *   `subtract: Nat Nat -> Nat` (This is a partial function. If subtraction results in a negative number, it should trigger a 'DomainError' effect rather than returning a value.)
        *   `equals?: Nat Nat -> Bool`
        *   `lessThan?: Nat Nat -> Bool`

2.  **Bool (Booleans):**
    *   Definition: `(deftype Bool (PFalse) (PTrue))`.
    *   CIFs: `PFalse`, `PTrue`.
    *   Operations:
        *   `and: Bool Bool -> Bool`
        *   `or: Bool Bool -> Bool`
        *   `not: Bool -> Bool`

3.  **List T (Lists):**
    *   Definition: `(deftype (List T) (Nil) (Cons T (List T)))` (Parameterized, recursive sum type).
    *   CIFs: `Nil`, `Cons`.
    *   Operations:
        *   `isEmpty?: (List T) -> Bool`
        *   `append: (List T) (List T) -> (List T)`
        *   `length: (List T) -> Nat`
        *   `mapList: (List T) (T -> U) -> (List U)`
        *   `filterList: (List T) (T -> Bool) -> (List T)`
        *   `foldLeft: (List T) U ((U T) -> U) -> U`
        *   `reverse: (List T) -> (List T)`

4.  **NonEmptyList T (Proof-Carrying Lists):**
    *   Definition: `(deftype (NonEmptyList T) (NECons T (List T)))` (A non-empty head followed by a standard list).
    *   CIFs: `NECons`.
    *   Operations (These are total functions on `NonEmptyList`):
        *   `head: (NonEmptyList T) -> T`
        *   `tail: (NonEmptyList T) -> (List T)`

**Implementation Considerations:**
-   The definitions should be placed in a standard library module that can be automatically loaded or easily imported.
-   Ensure the effect handling for `subtract` is correctly implemented and can be caught by an appropriate handler.
-   Programs should be encouraged to pattern match on `List T` to distinguish between the `Nil` case and the `(Cons h t)` case, which can then be used to construct a `(NonEmptyList T)` for safe use with `head` and `tail`.

# Test Strategy:
Testing will involve unit tests for each type and its operations, focusing on CIFs, functional correctness, type checking, and edge cases.

**1. Nat Tests:**
    - Verify `(Zero)` and `(Succ ...)` create `Nat` values.
    - Test `isZero?` on `Zero` and non-zero numbers.
    - Test `add` with various combinations.
    - Test `subtract`: verify correct results for N >= M. For N < M, verify that the appropriate 'DomainError' effect is triggered.
    - Test `equals?` and `lessThan?` with various pairs.
    - Type checking: `(add Zero PTrue)` should be a type error.

**2. Bool Tests:**
    - Verify `(PFalse)` and `(PTrue)` create `Bool` values.
    - Test `and`, `or`, `not` with all input combinations.
    - Type checking: `(and PTrue Zero)` should be a type error.

**3. List T Tests:**
    - Verify `(Nil)` and `(Cons val list)` create `List` values (e.g., `(List Nat)`).
    - Test `isEmpty?` on `(Nil)` and non-empty lists.
    - Test `append` with empty lists and non-empty lists.
    - Test `length` for various list sizes.
    - Test `mapList`, `filterList`, `foldLeft`, `reverse` with various inputs: empty lists, single-element lists, multiple-element lists.
    - Type checking: `(Cons 1 (Cons PTrue (Nil)))` should be a type error for a homogeneous list `(List Nat)`. Ensure higher-order functions' arguments are correctly type-checked.

**4. NonEmptyList T Tests:**
    - Verify `(NECons h t)` creates a `NonEmptyList T` value.
    - Test `head` on various non-empty lists to ensure it returns the first element.
    - Test `tail` on various non-empty lists to ensure it returns the rest of the list.
    - Type checking: `(head (Nil))` should be a type error, as `head` requires a `(NonEmptyList T)`.

**5. Integration Tests:**
    - Write small programs that pattern match on a `(List T)`, and upon finding a `(Cons h t)`, construct a `(NonEmptyList T)` to safely call `head` and `tail`.
    - Write programs that use `subtract` within an effect handler to catch and manage domain errors.
    - Verify that all defined functions and operations are correctly type-checked by the type system (Task 4).

# Subtasks:
## 1. Define `Bool` Type and Implement Core Boolean Operations [in-progress]
### Dependencies: None
### Description: Defines the `Bool` type using `deftype` with `PFalse` and `PTrue` variants. Implements its Canonical Instantiation Functions (CIFs) and the fundamental boolean operations: `and`, `or`, `not`. This subtask establishes the foundational boolean logic for the standard library.
### Details:
1. Define `Bool` using `(deftype Bool (PFalse) (PTrue))`.
2. Ensure `deftype` (from Task 5) generates `PFalse` and `PTrue` as CIFs.
3. Implement PathFinder LISP functions for:
   - `and: Bool Bool -> Bool`
   - `or: Bool Bool -> Bool`
   - `not: Bool -> Bool`
4. Ensure all functions are type-checked by the system's type checker (from Task 4).
5. Place these definitions in the standard library module for automatic loading or easy import.

## 2. Define `Nat` Type and Implement Basic Query and Comparison Operations [pending]
### Dependencies: 17.1
### Description: Defines the `Nat` (Natural Numbers) type using Peano representation `(deftype Nat (Zero) (Succ Nat))` via `deftype`. Implements its CIFs (`Zero`, `Succ`) and basic operations that query state or compare `Nat` values, returning `Bool`: `isZero?`, `equals?`, `lessThan?`. This subtask relies on `deftype` supporting recursive type definitions.
### Details:
1. Define `Nat` using `(deftype Nat (Zero) (Succ Nat))`. Confirm `deftype` (Task 5) supports recursive definitions as this is a recursive type.
2. Ensure `Zero` (CIF for the `Zero` variant) and `Succ` (CIF for the `Succ` variant, taking a `Nat`) are available as per `deftype` specification.
3. Implement PathFinder LISP functions for:
   - `isZero?: Nat -> Bool`
   - `equals?: Nat Nat -> Bool` (e.g., implement recursively by comparing structures: `(equals? Zero Zero)` is `PTrue`, `(equals? (Succ m) (Succ n))` is `(equals? m n)`, other cases `PFalse`)
   - `lessThan?: Nat Nat -> Bool` (e.g., implement recursively: `(lessThan? Zero (Succ n))` is `PTrue`, `(lessThan? (Succ m) (Succ n))` is `(lessThan? m n)`, other cases `PFalse`)
4. These functions will use the `Bool` type and its CIFs (`PTrue`, `PFalse`) from subtask 1 for their return values.
5. Ensure all functions are type-checked. Place these definitions in the standard library module.

## 5. Define Parameterized `List T` Type and Implement Safe Core Operations [pending]
### Dependencies: 17.1, 17.2
### Description: Defines the parameterized, recursive `List T` type using `deftype`: `(deftype (List T) (Nil) (Cons T (List T)))`. Implements its CIFs (`Nil`, `Cons`) and a comprehensive set of list operations that are total for all lists. This subtask relies on `deftype` supporting both parameterized and recursive types.
### Details:
1. Define `List T` using `(deftype (List T) (Nil) (Cons T (List T)))`. Confirm `deftype` (Task 5) supports parameterized and recursive types.
2. Ensure `Nil` (CIF for `Nil` variant, type `(List T)` for any `T`) and `Cons` (CIF for `Cons` variant, type `T (List T) -> (List T)`) are available.
3. Implement PathFinder LISP functions for:
   - `isEmpty?: (List T) -> Bool` (uses `Bool` from subtask 1)
   - `append: (List T) (List T) -> (List T)`
   - `length: (List T) -> Nat` (uses `Nat` from subtask 2)
   - `mapList: (List T) (T -> U) -> (List U)`
   - `filterList: (List T) (T -> Bool) -> (List T)` (predicate function uses `Bool` from subtask 1)
   - `foldLeft: (List T) U ((U T) -> U) -> U`
   - `reverse: (List T) -> (List T)` (can be implemented efficiently using `foldLeft`)
4. Ensure all functions are type-checked, including generic types `T` and `U`. Place in standard library module.

## 3. Define `NonEmptyList T` and Implement Safe `head`/`tail` Operations [pending]
### Dependencies: 17.5
### Description: Defines the `NonEmptyList T` type to statically guarantee non-emptiness. Implements total functions `head` and `tail` that operate on this type, providing safe, proof-carrying access to list elements.
### Details:
1. Define `NonEmptyList T` using `(deftype (NonEmptyList T) (NECons T (List T)))`.
2. Ensure `NECons` is available as a CIF with the type `T (List T) -> (NonEmptyList T)`.
3. Implement the following total PathFinder LISP functions:
   - `head: (NonEmptyList T) -> T`
   - `tail: (NonEmptyList T) -> (List T)`
4. These functions are guaranteed to succeed because the type `NonEmptyList T` provides proof that there is at least one element.
5. Place these definitions in the standard library module.

## 4. Implement `Nat` Arithmetic: `add` and Effectful `subtract` [pending]
### Dependencies: 17.2
### Description: Implements the arithmetic operations `add: Nat Nat -> Nat` and `subtract: Nat Nat -> Nat` for the `Nat` type. The `subtract` operation is partial and will use the language's effect system to signal a domain error when subtraction is not possible within `Nat`.
### Details:
1. Implement PathFinder LISP functions for:
   - `add: Nat Nat -> Nat` (Implement recursively: `(add Zero n) = n`, `(add (Succ m) n) = (Succ (add m n))`)
   - `subtract: Nat Nat -> Nat` (Implement recursively. For `(subtract (Succ m) (Succ n))`, recurse. For `(subtract Zero (Succ n))`, trigger a 'DomainError' effect.)
2. These functions operate on the `Nat` type defined in subtask 2.
3. Ensure all functions are type-checked. Place in standard library module.

