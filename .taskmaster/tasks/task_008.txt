# Task ID: 8
# Title: `ConstructionFailure` Effect and Basic CIF Runtime Constraints
# Status: pending
# Dependencies: 5, 7
# Priority: medium
# Description: Introduce the predefined `ConstructionFailure` effect as a proper algebraic effect within our 3-tier system. Modify Constructor Invocation Functions (CIFs) for types defined with `(:where ...)` clauses to `perform` this effect if runtime constraint checks fail. This allows construction failures to be managed by context-aware algebraic effect handlers rather than traditional exception handling.
# Details:
Predefine the `ConstructionFailure` effect (e.g., `(defeffect ConstructionFailure (fail (message String)) : Nothing)`). This will be a Tier 2/3 effect. Extend `deftype` to parse `(:where predicate-expr)` clauses. When a CIF for such a type is called, it will evaluate the `predicate-expr` after constructing the underlying value. If the predicate is false, the CIF will `perform (ConstructionFailure.fail "Constraint violated")`. Users can then manage this effect using the standard algebraic effect handler mechanism (e.g., `with-handler`). This allows for flexible, context-dependent failure management, such as providing a default value, logging the error, or aborting the computation.

# Test Strategy:
Define a type with a `(:where ...)` constraint (e.g., `(deftype PositiveNat Nat (:where (> self 0)))`). Test instantiation with valid values (should succeed) and invalid values (should perform `ConstructionFailure`). Verify that a suitable effect handler (e.g., one defined with `defhandler`) can intercept the `ConstructionFailure` effect and execute custom logic, such as returning a default value or re-raising a different effect.

# Subtasks:
## 1. Define Predefined `ConstructionFailure` Effect [pending]
### Dependencies: None
### Description: Introduce the `ConstructionFailure` effect into the system's core library or prelude. This effect signals failures during type construction when runtime constraints are violated.
### Details:
Implement `(defeffect ConstructionFailure (fail (message String)) : Nothing)` as specified. Ensure it's available globally. This should be classified as a Tier 2 (compile-time checkable) and Tier 3 (runtime) effect. The `fail` operation should accept a `String` message. The effect type should indicate no return value (e.g., `: Nothing`), signifying that it does not resume by default.

## 2. Extend `deftype` to Parse and Store `:where` Clauses [pending]
### Dependencies: 8.1
### Description: Modify the `deftype` macro or special form to recognize, parse, and store `(:where predicate-expr)` clauses found within type definitions. The predicate expression will be used for runtime validation.
### Details:
Update the `deftype` parser. When a `(:where predicate-expr)` clause is encountered: 1. Parse `predicate-expr`. 2. Store this predicate (e.g., as a lambda, an abstract syntax tree, or a compiled function) in the type's metadata. 3. Define and document a convention for how the value being constructed will be referenced within `predicate-expr` (e.g., a special variable like `self` or `this`).

## 3. Adapt CIF Generation to Incorporate Constraint Predicates [pending]
### Dependencies: 8.2
### Description: Update the Constructor Invocation Function (CIF) generation logic. For types defined with a `:where` clause, the generated CIF must be structured to call the stored predicate expression after the base value is constructed.
### Details:
Modify the code generation part of `deftype` or the CIF creation mechanism. When a CIF is generated for a type with a stored predicate: 1. The CIF should first construct the underlying value as usual. 2. After construction, the generated CIF code should include a call to the stored predicate, passing the newly constructed value to it according to the convention established in Subtask 2. The actual performing of the `ConstructionFailure` effect based on the predicate's result is handled in the next subtask.

## 4. Implement Runtime Predicate Check and `ConstructionFailure` Invocation in CIFs [pending]
### Dependencies: 8.1, 8.3
### Description: Enhance CIFs for types with `:where` clauses to execute the stored predicate at runtime. If the predicate evaluates to false, the CIF must perform the `ConstructionFailure.fail` effect.
### Details:
In the CIF execution flow for types with constraints: 1. After the base value is constructed and the predicate is called (as set up in Subtask 3), check its return value. 2. If the predicate returns `false` (or any falsey value according to the language's semantics), perform `(ConstructionFailure.fail "Constraint violated")`. The message can be made more specific, e.g., by including the type name or a user-provided message from the `:where` clause if supported.

## 5. Enable Handling of `ConstructionFailure` via Algebraic Effect Handlers [pending]
### Dependencies: 8.4
### Description: Ensure the existing algebraic effect handling mechanism can be used to manage the `ConstructionFailure` effect. This allows user code to define handlers that intercept construction failures and execute custom logic.
### Details:
Leverage the language's existing effect handler syntax (e.g., `with-handler` and `defhandler`). When a `ConstructionFailure` is performed within the dynamic scope of a handler: 1. Control is transferred to the appropriate clause in the handler. 2. The handler receives the effect payload (the message) and the continuation. 3. The handler can then choose to: a) Abort the computation and return a fallback value. b) Resume the computation with a default value if the effect signature allowed it (though `ConstructionFailure` shouldn't). c) Perform another effect. This subtask ensures the general handler mechanism works correctly for this specific, newly introduced effect.

