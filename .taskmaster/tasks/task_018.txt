# Task ID: 18
# Title: Implement Constraint System for Type Definitions and CIFs
# Status: pending
# Dependencies: 5, 4
# Priority: medium
# Description: Extend the type system to support dependent type constraints on type definitions using a `:where` clause. This will be verified at compile-time using the HoTT type system. The implementation will focus on generating proof obligations from constraints, requiring proof-of-satisfaction during instantiation, and creating proof-carrying values. This system will integrate with the Tier 1 (compile-time verification) and Tier 2 (constraint-aware effects) architecture, replacing traditional runtime checks.
# Details:
**1. Parser Extension (extending Task 5 `deftype`):**
   - Modify the parser to recognize an optional `:where` clause in `deftype` expressions.
   - Syntax: `(deftype TypeName ((field1 Type1) (field2 Type2) ...) :where <propositional-type>)`
   - The `<propositional-type>` is a type-level expression that depends on the fields of the struct (e.g., `(> field1 0)` is interpreted as a proposition to be proven).

**2. AST Representation:**
   - Define how the parsed propositional type is stored within the AST representation of the type definition.

**3. Type Checker & Proof Obligations (Tier 1):**
   - The type checker must interpret the `:where` clause as a proof obligation, creating a dependent type. For a type `T` with fields `f1, f2` and constraint `P`, the full type is effectively `(T f1 f2 where (P f1 f2))`.
   - At instantiation sites, e.g., `(T val1 val2)`, the type checker must verify that a proof for the proposition `(P val1 val2)` can be synthesized or is explicitly provided.
   - Failure to construct or verify a proof must result in a compile-time type error.

**4. Proof-Carrying Values & Instantiation:**
   - Instances of constrained types are "proof-carrying values." The runtime representation of the value must bundle the data with the evidence (the proof object) that its constraints are satisfied.
   - The concept of Canonical Instantiation Functions (CIFs) is updated: instead of performing a runtime boolean check, the instantiation process now requires a proof object as an input (which may be synthesized by the compiler) and produces a proof-carrying value.

**5. Tier 2 Integration (Constraint-Aware Effects):**
   - Integrate with the Tier 2 effect system. Functions that produce values of a constrained type must have an effect signature that reflects the proof obligation.
   - For example, a function `(-> Nat PositiveNat)` must have an effect that it discharges the proof for `(IsPositive result)`.
   - Conversely, functions consuming proof-carrying values can use the carried proof to satisfy their own preconditions.

**6. Error Reporting:**
   - Implement clear and informative compile-time error messages for:
     - Syntax errors in `:where` clauses.
     - Proof failures during instantiation, indicating the specific proposition that could not be proven and the values involved.

# Test Strategy:
**1. Parser Tests:**
   - Test `deftype` with valid `:where` clauses using various propositional types (e.g., `(IsPositive field1)`, `(< x y)`).
   - Test `deftype` with syntactically invalid `:where` clauses.

**2. Type Checker & Proof Verification Tests (Tier 1):**
   - Define `(deftype PositiveNat (value Nat) :where (IsPositive value))`.
     - Test `(PositiveNat 10)`: Should succeed at compile time as a proof can be synthesized.
     - Test `(PositiveNat 0)`: Should fail at compile time with a proof error.
   - Define `(deftype OrderedPair (x Nat) (y Nat) :where (< x y))`.
     - Test `(OrderedPair 1 2)`: Should succeed.
     - Test `(OrderedPair 2 1)`: Should fail at compile time with a proof error.

**3. Proof-Carrying Value Tests:**
   - Verify that an instance of `PositiveNat` contains both the numeric value and a proof object for `IsPositive`.
   - Write a function `(fn [p PositiveNat] ...)` and verify that within its body, the compiler knows that `(> (p.value) 0)` is true without a runtime check.

**4. Tier 2 Effect System Tests:**
   - Test that a function declared as `(-> Nat PositiveNat)` is type-checked correctly and its effect signature reflects the proof obligation.
   - Test that a function that internally calls `(PositiveNat -1)` fails to type-check because it cannot discharge its effect.

**5. Error Reporting Tests:**
   - For each proof failure mode, verify that the error message clearly indicates the proposition that failed, the values used, and why the proof could not be constructed.

# Subtasks:
## 1. Extend Parser and AST for Dependent Type Constraints [pending]
### Dependencies: None
### Description: Modify the `deftype` parser to recognize a `:where` clause containing a propositional type and update the AST to represent this dependent constraint.
### Details:
1. Update the parser grammar for `deftype` to support the syntax: `(deftype TypeName ((field1 Type1) ...) :where <propositional-type>)`.
2. The `<propositional-type>` should be parsed into a type-level AST node.
3. Define how this constraint is stored within the AST of the type definition, linking it to the fields it depends on.

## 2. Generate Proof Obligations in Type Checker [pending]
### Dependencies: 18.1
### Description: Integrate logic into the type checker to interpret a `:where` clause as a proof obligation, effectively creating a dependent type.
### Details:
1. The type checker, when processing a `deftype`, must identify the `:where` clause's proposition.
2. It must establish the dependency of the proposition on the type's fields, creating a dependent type definition.
3. This definition will be used to generate proof obligations at instantiation sites.

## 3. Implement Compile-Time Proof Verification (Tier 1) [pending]
### Dependencies: 18.2
### Description: Implement the core logic in the type checker to verify proofs for constraints at instantiation sites. This is the primary compile-time validation step.
### Details:
1. When type-checking a call to a type constructor (e.g., `(MyType ...)`), retrieve the corresponding proof obligation.
2. Attempt to automatically synthesize a proof for the obligation using the provided literal values and the HoTT system's theorem prover/proof synthesizer.
3. If a proof cannot be synthesized, check if one was provided explicitly.
4. A failure to find or verify a proof must result in a compile-time error.

## 4. Implement Proof-Carrying Values and Update Instantiation [pending]
### Dependencies: 18.3
### Description: Modify the runtime representation of constrained types to be proof-carrying and update the instantiation logic (e.g., CIFs) to construct these values.
### Details:
1. Define the runtime memory layout for a proof-carrying value, which bundles the data fields with a proof object.
2. Modify the code generation for type instantiation. The instantiation function will now take the field values and a proof object as arguments.
3. The compiler will be responsible for passing the synthesized or user-provided proof to this function at the call site.
4. This replaces the old model of runtime boolean checks entirely.

## 5. Integrate with Tier 2 Effects and Implement Error Reporting [pending]
### Dependencies: 18.4
### Description: Connect the constraint system to the Tier 2 effect system and implement clear, user-friendly error messages for all stages of proof failure.
### Details:
1. **Tier 2 Effects:** Ensure that functions producing constrained types declare this as part of their effect signature. The type checker must verify that the function body successfully discharges this proof obligation.
2. **Error Reporting:** Design and implement clear compile-time error messages for proof failures. Messages should specify the proposition that failed and the concrete values that caused the failure.

