# Task ID: 19
# Title: Enhanced Error Reporting and Diagnostics System
# Status: pending
# Dependencies: 3, 4
# Priority: medium
# Description: Implement a comprehensive, HoTT-aware error reporting and diagnostics system tailored for a 3-tier architecture. The system will replace traditional stack traces with context-aware diagnostics for proof failures (Tier 1), effect resolution issues (Tier 2), and runtime effect handler problems (Tier 3). It will generate messages that explain proof obligation failures, effect context violations, dependent type mismatches, and type universe errors, guiding users toward correct dependent type usage.
# Details:
1. **Tier-Aware Error Data Structures**: Define data structures that capture the context of our 3-tier architecture. This includes specific structures for:
    *   **Tier 1 Proof Failures**: Capturing the proof goal, hypotheses, and the point of failure in the proof term.
    *   **Tier 2 Effect Violations**: Representing effect resolution failures, including expected vs. actual effect contexts and the source of the violation.
    *   **Tier 3 Runtime Handler Errors**: Storing information about failures within runtime effect handlers.
    *   **Dependent Type Errors**: Specifically for universe inconsistencies and dependent type mismatches, capturing the path and context of the type dependency.
2. **Contextual Diagnostic Generation**: Develop a module to translate error structures into context-aware diagnostics, replacing traditional stack traces. The output should clearly present:
    *   **Proof Obligation Traces**: For Tier 1, show the sequence of proof obligations that led to the failure.
    *   **Effect Context Diffs**: For Tier 2, visualize the discrepancy between required and provided effect contexts.
    *   **Dependent Type Mismatch Explanations**: Clearly articulate why a dependent type application is incorrect, guiding the user on how to fix it.
3. **Integration with 3-Tier System**:
    *   Integrate with the **Tier 1 proof engine** to capture and report proof failures.
    *   Integrate with the **Tier 2 effect checker/resolver** to report effect violations.
    *   Integrate with the **Tier 3 runtime system** to handle and report errors from effect handlers.
4. **User Guidance for Dependent Types**: Ensure all relevant error messages, especially for type mismatches, are designed to educate the user on the principles of dependent types, providing actionable suggestions for correcting their code.

# Test Strategy:
1. **Unit Tests for Error Structures**: Verify that the new tier-aware data structures correctly capture context for proof failures, effect violations, and dependent type errors.
2. **Tier 1 Proof Failure Tests**: Create test cases with incorrect proofs. Verify that the system generates clear proof obligation traces and accurately identifies the point of failure.
3. **Tier 2 Effect Violation Tests**: Write code that violates effect constraints. Test that the system correctly reports the effect context mismatch and points to the source of the violation.
4. **Tier 3 Runtime Handler Tests**: Simulate failures within runtime effect handlers and verify that the error reporting system captures and presents the errors correctly.
5. **Dependent Type Error Tests**: Write code with common dependent type errors (e.g., universe inconsistencies, incorrect path applications). Verify that the error messages provide clear explanations and helpful guidance.
6. **Diagnostic Usability Review**: Conduct reviews of the generated diagnostics (proof traces, effect diffs) for clarity, accuracy, and actionability with developers familiar with HoTT and effect systems.

# Subtasks:
## 1. Define Tier-Aware Error Data Structures for Proofs, Effects, and Types [pending]
### Dependencies: None
### Description: Establish foundational data structures tailored for our 3-tier architecture. These structures must capture detailed context for Tier 1 proof failures, Tier 2 effect violations, Tier 3 runtime errors, and complex dependent type mismatches.
### Details:
1. Define specific classes/structs for `ProofFailureError`, `EffectContextViolationError`, `RuntimeHandlerError`, and `DependentTypeError`.
2. For `ProofFailureError`, include fields for the proof goal, hypotheses, and the failing sub-term.
3. For `EffectContextViolationError`, include fields for expected vs. actual effect signatures and the operation causing the violation.
4. For `DependentTypeError`, include fields for universe levels, path details, and the context of the type dependency.
5. Update the central error collector to handle these new, specialized error structures.

## 2. Develop Contextual Diagnostic Generation Engine [pending]
### Dependencies: 19.1
### Description: Create a module to translate the structured, tier-aware error data (from subtask 1) into human-readable, contextual diagnostics that replace traditional stack traces. This includes generating proof failure traces and effect context diffs.
### Details:
1. Implement a primary function that accepts a tier-aware error object (from subtask 1).
2. For `ProofFailureError`, generate a trace of the proof obligations leading to the failure.
3. For `EffectContextViolationError`, generate a clear "diff" showing the discrepancy between the required and provided effect contexts.
4. For `DependentTypeError`, generate messages that explain the universe mismatch or path inconsistency, guiding the user toward a correct formulation.
5. Ensure the output format is clear and helps developers debug issues across the three tiers.

## 3. Integrate Tier 1 Proof Failure Reporting with Proof Engine [pending]
### Dependencies: 19.1, 19.2
### Description: Integrate the new error reporting system with the Tier 1 proof engine to capture and report proof failures, including failed proof obligations and ill-formed proof terms.
### Details:
1. Identify all points in the proof engine where proof obligations are generated and checked.
2. When a proof fails, instantiate the `ProofFailureError` data structure (from subtask 1) with the goal, context, and failing term.
3. Report the error object to the central collector.
4. Verify that the diagnostic engine (subtask 2) produces a clear proof trace that helps the user understand why their proof is incorrect.

## 4. Integrate Tier 2 and Tier 3 Effect Error Reporting [pending]
### Dependencies: 19.1, 19.2
### Description: Integrate the error reporting system with the Tier 2 effect checker and Tier 3 runtime system to provide detailed diagnostics for effect-related errors.
### Details:
1. In the Tier 2 effect checker, when an effect violation is detected, create and report an `EffectContextViolationError` object.
2. Ensure the error context includes the expected and actual effects.
3. In the Tier 3 runtime, wrap effect handler execution to catch exceptions or failures.
4. When a handler fails, create and report a `RuntimeHandlerError` object with relevant runtime state.
5. Verify the diagnostic engine (subtask 2) produces clear messages for both compile-time effect violations and runtime handler failures.

## 5. Refine Diagnostics for Dependent Types and Add User Guidance [pending]
### Dependencies: 19.2, 19.3, 19.4
### Description: Focus on making diagnostics for dependent type errors exceptionally clear and educational. Refine messages to guide users in correctly using dependent types, path equalities, and universe levels.
### Details:
1. Review and refine all messages related to `DependentTypeError`.
2. For common errors like universe inconsistencies, provide explicit suggestions (e.g., "Try lifting the type to a higher universe level").
3. For dependent type mismatches, attempt to pinpoint the specific part of the type that is incorrect and explain the dependency.
4. Ensure error messages related to type families and path equalities are precise and link back to the relevant definitions.
5. Collect feedback from developers on the clarity of these specific error messages.

